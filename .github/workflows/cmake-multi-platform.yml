name: Cross Compile for ARMv7 Hard Float

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-armv7:
    runs-on: ubuntu-22.04  # 使用 22.04，它对 armhf 支持更好
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in ARM container
      run: |
        docker run --rm \
          --platform linux/arm/v7 \
          -v $PWD:/workspace \
          -w /workspace \
          debian:bullseye-slim \
          bash -c "
            set -e
            
            # 更新包列表并安装依赖
            apt-get update
            apt-get install -y \
              build-essential \
              gcc \
              g++ \
              make \
              cmake \
              pkg-config \
              git \
              libfreetype6-dev \
              libfontconfig1-dev \
              libxkbcommon-dev \
              libwayland-dev \
              libgl1-mesa-dev \
              libglu1-mesa-dev \
              libegl1-mesa-dev \
              libx11-dev \
              libxrandr-dev \
              libxi-dev \
              libxcursor-dev \
              libxinerama-dev \
              libutf8proc-dev \
              libnotify-bin
            
            # 检测构建系统并编译
            if [ -f 'Makefile' ]; then
              echo '==> Building with Make'
              
              # 修复 Makefile 中的 -mtune=generic 问题
              if grep -q 'mtune=generic' Makefile; then
                echo 'Patching Makefile to remove -mtune=generic...'
                sed -i 's/-mtune=generic/-mtune=cortex-a7/g' Makefile
              fi
              
              # 添加 -lrt 库到链接标志
              if grep -q 'LDFLAGS' Makefile; then
                echo 'Adding -lrt to LDFLAGS...'
                sed -i 's/\(LDFLAGS.*\)/\1 -lrt/' Makefile
              else
                echo 'Adding LDFLAGS with -lrt...'
                sed -i '1i LDFLAGS += -lrt' Makefile
              fi
              
              # 设置 ARM 编译标志
              export CFLAGS=\"-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard\"
              export CXXFLAGS=\"-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard\"
              export LDFLAGS=\"-lrt\"
              
              make -j\$(nproc)
            elif [ -f 'CMakeLists.txt' ]; then
              echo '==> Building with CMake'
              mkdir -p build
              cd build
              cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_FLAGS=\"-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard\" \
                -DCMAKE_CXX_FLAGS=\"-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard\"
              make -j\$(nproc)
            elif [ -f 'meson.build' ]; then
              echo '==> Building with Meson'
              apt-get install -y python3-pip ninja-build
              pip3 install meson
              meson setup build --buildtype=release
              meson compile -C build
            else
              echo 'No build system detected!'
              exit 1
            fi
            
            # 查找并显示编译的二进制文件
            echo '==> Searching for binary files:'
            find . -type f -executable -name 'wayst*' -o -name '*wayst*' | grep -v '.git'
          "

    - name: Verify and collect binaries
      run: |
        echo "==> Verifying binary architecture:"
        
        # 安装 file 工具
        sudo apt-get update
        sudo apt-get install -y file
        
        # 查找编译的二进制文件
        BINARY=$(find . -type f -executable -name "wayst" | grep -v '.git' | head -n 1)
        
        if [ -z "$BINARY" ]; then
          echo "Binary 'wayst' not found, searching for alternatives..."
          BINARY=$(find build -type f -executable 2>/dev/null | grep -v -E '\.(o|a|so|cmake)$' | head -n 1)
        fi
        
        if [ -n "$BINARY" ]; then
          echo "Found binary: $BINARY"
          file "$BINARY"
          
          # 创建 artifacts 目录
          mkdir -p artifacts
          cp "$BINARY" artifacts/wayst
          
          # 复制可能的其他文件
          [ -f "README.md" ] && cp README.md artifacts/ || true
          [ -f "LICENSE" ] && cp LICENSE artifacts/ || true
        else
          echo "ERROR: No binary found!"
          echo "Directory contents:"
          find . -type f | grep -v '.git' | head -20
          exit 1
        fi

    - name: Package tar.gz
      run: |
        cd artifacts
        tar -czf wayst-armv7-hf.tar.gz *
        mv wayst-armv7-hf.tar.gz ../
        cd ..
        ls -lh wayst-armv7-hf.tar.gz

    - name: Build IPK package
      run: |
        echo "==> Building IPK package for Wayst"
        
        # 获取版本号（从 git tag 或使用默认值）
        VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "1.0.0")
        ARCH="armv7-a_neon-vfpv4_hardfp"
        PKG_NAME="wayst"
        
        # 创建 IPK 目录结构
        mkdir -p ipk-build/control
        mkdir -p ipk-build/data/usr/bin
        mkdir -p ipk-build/data/usr/share/doc/wayst
        
        # 复制二进制文件
        cp -v artifacts/wayst ipk-build/data/usr/bin/
        chmod +x ipk-build/data/usr/bin/wayst
        
        # 复制文档
        [ -f "README.md" ] && cp README.md ipk-build/data/usr/share/doc/wayst/ || true
        [ -f "LICENSE" ] && cp LICENSE ipk-build/data/usr/share/doc/wayst/ || true
        
        # 创建 control 文件
        cat > ipk-build/control/control << EOF
        Package: ${PKG_NAME}
        Version: ${VERSION}-1
        Architecture: ${ARCH}
        Maintainer: GitHub Actions <actions@github.com>
        Section: utils
        Priority: optional
        Depends: libfreetype6, libfontconfig1, libxkbcommon0, libwayland-client0, libwayland-egl1, libwayland-cursor0, libx11-6, libxrandr2, libegl1, libgl1, libutf8proc2
        Description: A simple terminal emulator
        EOF
        
        # 创建 postinst 脚本
        cat > ipk-build/control/postinst << 'EOF'
        #!/bin/sh
        echo "Wayst terminal emulator has been installed to /usr/bin/wayst"
        echo "Run 'wayst' to start the terminal"
        exit 0
        EOF
        chmod +x ipk-build/control/postinst
        
        # 创建 prerm 脚本
        cat > ipk-build/control/prerm << 'EOF'
        #!/bin/sh
        exit 0
        EOF
        chmod +x ipk-build/control/prerm
        
        # 计算安装大小
        INSTALLED_SIZE=$(du -sk ipk-build/data | cut -f1)
        echo "Installed-Size: ${INSTALLED_SIZE}" >> ipk-build/control/control
        
        # 打包 data.tar.gz
        cd ipk-build/data
        tar -czf ../data.tar.gz .
        cd ../..
        
        # 打包 control.tar.gz
        cd ipk-build/control
        tar -czf ../control.tar.gz .
        cd ../..
        
        # 创建 debian-binary
        echo "2.0" > ipk-build/debian-binary
        
        # 打包成 IPK
        cd ipk-build
        tar -czf ../${PKG_NAME}_${VERSION}-1_${ARCH}.ipk debian-binary control.tar.gz data.tar.gz
        cd ..
        
        echo "==> IPK package created:"
        ls -lh ${PKG_NAME}_${VERSION}-1_${ARCH}.ipk
        
        # 显示 IPK 内容
        echo "==> IPK package contents:"
        tar -tzf ${PKG_NAME}_${VERSION}-1_${ARCH}.ipk
        
        # 解压查看 control 文件
        echo "==> Control file contents:"
        mkdir -p ipk-inspect
        cd ipk-inspect
        tar -xzf ../${PKG_NAME}_${VERSION}-1_${ARCH}.ipk
        tar -xzf control.tar.gz
        cat control
        cd ..

    - name: Upload tar.gz artifact
      uses: actions/upload-artifact@v4
      with:
        name: wayst-armv7-hf-tarball
        path: wayst-armv7-hf.tar.gz
        retention-days: 30

    - name: Upload IPK artifact
      uses: actions/upload-artifact@v4
      with:
        name: wayst-armv7-hf-ipk
        path: "*.ipk"
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          wayst-armv7-hf.tar.gz
          *.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
