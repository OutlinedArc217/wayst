name: Cross Compile for ARMv7 Hard Float

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-armv7:
    runs-on: ubuntu-22.04  # 使用 22.04，它对 armhf 支持更好
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in ARM container
      run: |
        docker run --rm \
          --platform linux/arm/v7 \
          -v $PWD:/workspace \
          -w /workspace \
          debian:bullseye-slim \
          bash -c "
            set -e
            
            # 更新包列表并安装依赖
            apt-get update
            apt-get install -y \
              build-essential \
              gcc \
              g++ \
              make \
              cmake \
              pkg-config \
              git \
              libfreetype6-dev \
              libfontconfig1-dev \
              libxkbcommon-dev \
              libwayland-dev \
              libgl1-mesa-dev \
              libglu1-mesa-dev \
              libegl1-mesa-dev \
              libx11-dev \
              libxrandr-dev \
              libxi-dev \
              libxcursor-dev \
              libxinerama-dev
            
            # 检测构建系统并编译
            if [ -f 'Makefile' ]; then
              echo '==> Building with Make'
              make -j\$(nproc)
            elif [ -f 'CMakeLists.txt' ]; then
              echo '==> Building with CMake'
              mkdir -p build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release
              make -j\$(nproc)
            elif [ -f 'meson.build' ]; then
              echo '==> Building with Meson'
              apt-get install -y python3-pip ninja-build
              pip3 install meson
              meson setup build --buildtype=release
              meson compile -C build
            else
              echo 'No build system detected!'
              exit 1
            fi
            
            # 查找并显示编译的二进制文件
            echo '==> Searching for binary files:'
            find . -type f -executable -name 'wayst*' -o -name '*wayst*' | grep -v '.git'
          "

    - name: Verify and collect binaries
      run: |
        echo "==> Verifying binary architecture:"
        
        # 安装 file 工具
        sudo apt-get update
        sudo apt-get install -y file
        
        # 查找编译的二进制文件
        BINARY=$(find . -type f -executable -name "wayst" | grep -v '.git' | head -n 1)
        
        if [ -z "$BINARY" ]; then
          echo "Binary 'wayst' not found, searching for alternatives..."
          BINARY=$(find build -type f -executable 2>/dev/null | grep -v -E '\.(o|a|so|cmake)$' | head -n 1)
        fi
        
        if [ -n "$BINARY" ]; then
          echo "Found binary: $BINARY"
          file "$BINARY"
          
          # 创建 artifacts 目录
          mkdir -p artifacts
          cp "$BINARY" artifacts/wayst
          
          # 复制可能的其他文件
          [ -f "README.md" ] && cp README.md artifacts/ || true
          [ -f "LICENSE" ] && cp LICENSE artifacts/ || true
        else
          echo "ERROR: No binary found!"
          echo "Directory contents:"
          find . -type f | grep -v '.git' | head -20
          exit 1
        fi

    - name: Package artifacts
      run: |
        cd artifacts
        tar -czf wayst-armv7-hf.tar.gz *
        ls -lh wayst-armv7-hf.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wayst-armv7-hf
        path: artifacts/wayst-armv7-hf.tar.gz
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/wayst-armv7-hf.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
